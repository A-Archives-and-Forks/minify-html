#!/usr/bin/env node
"use strict";

const {readFileSync, writeFileSync} = require('fs');
const {spawnSync} = require('child_process');
const {join} = require('path');

const NEW_VERSION = process.argv[2];

const cmd = (...cfg) => {
  const command = cfg[0];
  const args = cfg.slice(1);
  const {
    workingDir,
    throwOnBadStatus = true,
    throwOnSignal = true,
    captureStdio = false,
    throwOnStdErr = false,
  } = typeof args[args.length - 1] == "object" ? args.pop() : {};

  const throwErr = msg => {
    throw new Error(`${msg}\n  ${command} ${args.join(' ')}`);
  };

  const {status, signal, error, stdout, stderr} = spawnSync(command, args.map(String), {
    cwd: workingDir,
    stdio: ['ignore', captureStdio ? 'pipe' : 'inherit', captureStdio || throwOnStdErr ? 'pipe' : 'inherit'],
    encoding: 'utf8',
  });
  if (error) {
    throwErr(error.message);
  }
  if (throwOnSignal && signal) {
    throwErr(`Command exited with signal ${signal}`);
  }
  if (throwOnBadStatus && status !== 0) {
    throwErr(`Command exited with status ${status}`);
  }
  if (throwOnStdErr && stderr) {
    throwErr(`stderr: ${stderr}`);
  }
  return {status, signal, stdout, stderr};
};

const replaceInFile = (path, pattern, replacement) => writeFileSync(path, readFileSync(path, "utf8").replace(pattern, replacement));

if (cmd('git', 'status', '--porcelain', {throwOnStderr: true, captureStdio: true}).stdout) {
  throw new Error(`Working directory not clean`);
}

for (const f of ["Cargo.toml", "nodejs/native/Cargo.toml", "java/Cargo.toml", "python/Cargo.toml"]) {
  replaceInFile(f, /^version = "\d+\.\d+\.\d+"\s*$/m, `version = "${NEW_VERSION}"`);
}

for (const f of ["README.md", "nodejs/native/Cargo.toml", "java/Cargo.toml", "python/Cargo.toml"]) {
  replaceInFile(f, /^hyperbuild = "\d+\.\d+\.\d+"\s*$/m, `hyperbuild = "${NEW_VERSION}"`);
}

for (const f of ["nodejs/package.json"]) {
  replaceInFile(f, /^(\s*)"version": "\d+\.\d+\.\d+",\s*$/m, `$1"version": "${NEW_VERSION}",`);
}

for (const f of ["java/pom.xml"]) {
  replaceInFile(f, /(<artifactId>hyperbuild<\/artifactId>\s*<version>)\d+\.\d+\.\d+(<\/version>)/, `$1${NEW_VERSION}$2`);
}

for (const f of ["README.md"]) {
  replaceInFile(f, /(wilsonl\.in\/hyperbuild\/bin\/)\d+\.\d+\.\d+/g, `$1${NEW_VERSION}`);
}

cmd('cargo', 'generate-lockfile');
cmd('git', 'add', '-A');
cmd('git', 'commit', '-m', NEW_VERSION);
cmd('git', 'tag', '-a', `v${NEW_VERSION}`, '-m', '');
cmd('cargo', 'publish');
cmd('npm', 'publish', {workingDir: join(__dirname, 'nodejs')});
cmd('git', 'push', '--follow-tags');
